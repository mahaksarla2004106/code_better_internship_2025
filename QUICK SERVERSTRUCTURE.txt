CREATE DATABASE STRUCTURE;
USE STRUCTURE;

# CREATE  USERS TABLE 
 CREATE TABLE USERS(
 USER_ID INT PRIMARY KEY ,
 NAME VARCHAR(50),
 MOBILE VARCHAR(20),
 EMAIL VARCHAR(255) unique ,
 PASSWORD VARCHAR(20) ,
 ROLE ENUM ('Admin', 'Service Provider', 'Customer') NOT NULL,
 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP );
 
 #CRAETE BUSINESSES TABLE 
 CREATE TABLE BUSINESSES(
 BUSINESSES_ID INT PRIMARY KEY,
 USER_ID INT ,
 BUSINESS_NAME VARCHAR(255) NOT NULL,
 ADDRESS VARCHAR(50),
 CONTACT_INFO INT,
 LOGO_URL VARCHAR(2083),
 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP );
 
 # CREATE CATEGORIES TABLE 
 CREATE TABLE CATEGORIES (
category_id INT PRIMARY KEY,
CATEGORY_NAME VARCHAR(50),
CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP );
 
 #CREATE SUBCATEGORIES TABLE 
 CREATE TABLE SUBCATEGORIES(
 SUBCATEGORY_ID INT PRIMARY KEY ,
 CATEGORY_ID INT,
 SUBCATEGORY_NAME VARCHAR(50),
 CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP );

# CREATE SERVICE TABLE WITH FK
CREATE TABLE SERVICES(
SERVICE_ID INT PRIMARY KEY,
BUSINESS_ID INT,
SUBCATEGORY_ID INT,
SERVICE_NAME VARCHAR(50),
DESCRIPTION TEXT,
PRICE INT,
CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);

#CREATE TABLE APPOINTMENTS 
CREATE TABLE Appointments (
    APPOINTMENT_ID INT AUTO_INCREMENT PRIMARY KEY,
    SERVICE_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    APPOINTMENT_DATE DATE NOT NULL,
    TIME_SLOT VARCHAR(20) NOT NULL,
    STATUS ENUM('Booked', 'Cancelled', 'Completed') NOT NULL DEFAULT 'BOOKED',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);

#CREATE TABLE PAYMENTS
CREATE TABLE PAYMENTS (
PAYMENT_ID INT NOT NULL,
APPOINTMENT_ID INT NOT NULL,
AMOUNT INT,
PAYMENT_METHOD VARCHAR(20),
STATUS ENUM('PAID','FAILED','REFUNDED'),
CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);

 #CREATE TABLE REVIEWS
 CREATE TABLE REVIEWS(
 REVIWE_ID INT PRIMARY KEY,
 SERVICE_ID INT ,
 USER_ID INT,
 RATEING  INT NOT NULL,
 COMMENT TEXT,
 CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);
 
 #CREATE TABLE NOTIFICATION 
 CREATE TABLE NOTIFICATION(
 NOTIFICATION_ID INT PRIMARY KEY,
 USER_ID INT ,
 MESSAGE TEXT,
 IS_READ BOOLEAN ,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
  
  
  #FK IN BUSSINESS TABLE 
ALTER TABLE BUSINESSES
ADD CONSTRAINT fk_BUSSINES
FOREIGN KEY (user_id)
REFERENCES Users(user_id);

#FK IN SUBCATEGORY TABLE 
ALTER TABLE SUBCATEGORIES
ADD CONSTRAINT fk_SUBCATE
FOREIGN KEY (CATEGORY_ID)
REFERENCES CATEGORIES(CATEGORY_ID);

#FK IN SERVICE TABLE
ALTER TABLE SERVICES
ADD CONSTRAINT fk_SERVICE
FOREIGN KEY (BUSINESS_ID)
REFERENCES BUSINESSES(BUSINESSES_ID);

#FK IN SERVICE TABLE
ALTER TABLE SERVICES
ADD CONSTRAINT fk_SUBCATEGORYS
FOREIGN KEY (SUBCATEGORY_ID )
REFERENCES SUBCATEGORIES(SUBCATEGORY_ID);

#FK IN APPOINTMENT TABLE 
ALTER TABLE APPOINTMENTS
ADD CONSTRAINT fk_APPOINTS
FOREIGN KEY (SERVICE_ID)
REFERENCES SERVICES(SERVICE_ID);

#FK IN APPOINTMENTS TABLE 
ALTER TABLE APPOINTMENTS
ADD CONSTRAINT fk_APPOIN
FOREIGN KEY (USER_ID )
REFERENCES USERS(USER_ID);

# FK IN PAYMENTS TABLE 
ALTER TABLE PAYMENTS 
ADD CONSTRAINT fk_PAY
FOREIGN KEY (APPOINTMENT_ID )
REFERENCES APPOINTMENTS(APPOINTMENT_ID);

# FK IN REVIEW TABLE 
ALTER TABLE REVIEWS
ADD CONSTRAINT fk_REVI
FOREIGN KEY (SERVICE_ID )
REFERENCES SERVICES(SERVICE_ID);

#FK IN REVIEW TABLE
ALTER TABLE REVIEWS
ADD CONSTRAINT fk_REVIW
FOREIGN KEY (USER_ID )
REFERENCES USERS(USER_ID);

#FK IN NOTIFICATION TABLE 
ALTER TABLE NOTIFICATION
ADD CONSTRAINT fk_NOTIFIY
FOREIGN KEY (USER_ID )
REFERENCES USERS(USER_ID);