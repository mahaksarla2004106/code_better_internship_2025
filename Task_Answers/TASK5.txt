CREATE DATABASE Zomato;


USE Zomato;

CREATE TABLE Restaurants(
restaurants_id INT PRIMARY KEY,
name VARCHAR(100),
city VARCHAR(100),
cuisine_type ENUM ('Indian','Chinese','Italian'),
rating INT check (rating between 0 AND 5),
average VARCHAR(100)
);

CREATE TABLE Customers(
customer_id INT PRIMARY KEY,
first_name VARCHAR(20),
last_name VARCHAR(20),
phone VARCHAR(14),
city VARCHAR(50),
join_date DATE);

CREATE TABLE Orders(
order_id INT PRIMARY KEY,
customer_id INT,
FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
res_id INT,
FOREIGN KEY (res_id) REFERENCES Restaurants(restaurants_id),
order_date DATE,
order_amount DECIMAL(10,2),
order_status ENUM ('Delivered','Cancelled','Pending'));

CREATE TABLE Reviews(
review_id INT PRIMARY KEY,
customer_id INT,
FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
res_id INT,
FOREIGN KEY (res_id) REFERENCES Restaurants(restaurants_id),
rating INT check (rating between 0 AND 5),
comment TEXT,
review_date DATE);

CREATE TABLE Payments(
payment_id INT PRIMARY KEY,
order_id INT,
FOREIGN KEY (order_id) REFERENCES Orders(order_id),
payment_m ENUM ('Card','Cash','Wallet'),
amount DECIMAL(10,2),
payment_date DATE);

INSERT INTO Restaurants (restaurants_id, name, city, cuisine_type, rating, average) VALUES
(1, 'The Royal Feast', 'Delhi', 'Indian', 4, '₹500'),
(2, 'Dragon Palace', 'Mumbai', 'Chinese', 4, '₹400'),
(3, 'Pasta Piazza', 'Bangalore', 'Italian', 3, '₹600'),
(4, 'Curry Leaves', 'Chennai', 'Indian', 5, '₹350'),
(5, 'The Noodle House', 'Kolkata', 'Chinese', 3, '₹450');

INSERT INTO Restaurants (restaurants_id, name, city, cuisine_type, rating, average) VALUES
(6, 'RSB_RS', 'Mumbai', 'Italian', 5, '₹800');



INSERT INTO Customers (customer_id, first_name, last_name, phone, city, join_date) VALUES
(101, 'John', 'Doe', '9876543210', 'Delhi', '2022-01-10'),
(102, 'Jane', 'Smith', '9123456789', 'Mumbai', '2021-05-20'),
(103, 'Mike', 'Johnson', '9998887777', 'Bangalore', '2023-02-15'),
(104, 'Emily', 'Clark', '8800112233', 'Chennai', '2022-07-30'),
(105, 'David', 'Brown', '8112233445', 'Kolkata', '2020-11-25');

INSERT INTO Customers (customer_id, first_name, last_name, phone, city, join_date) VALUES
(106, 'shivam', 'Doe', '9876543210', 'Delhi', '2012-01-10');



INSERT INTO Orders (order_id, customer_id, res_id, order_date, order_amount, order_status) VALUES
(1001, 101, 1, '2023-01-20', 500.00, 'Delivered'),
(1002, 102, 2, '2023-02-15', 400.00, 'Delivered'),
(1003, 103, 3, '2023-03-10', 600.00, 'Pending'),
(1004, 104, 4, '2023-04-05', 350.00, 'Delivered'),
(1005, 105, 5, '2023-05-01', 450.00, 'Cancelled');

INSERT INTO Orders (order_id, customer_id, res_id, order_date, order_amount, order_status) VALUES
(1006, 101, 1, '2024-01-20', 500.00, 'Delivered');


INSERT INTO Reviews (review_id, customer_id, res_id, rating, comment, review_date) VALUES
(1, 101, 1, 4, 'Great food, loved the ambiance!', '2023-01-22'),
(2, 102, 2, 4, 'Nice place, tasty food!', '2023-02-18'),
(3, 103, 3, 3, 'Food was okay, but not the best!', '2023-03-12'),
(4, 104, 4, 5, 'Exceptional! The best curry I have ever had.', '2023-04-07'),
(5, 105, 5, 2, 'Food was cold and tasteless, not recommended!', '2023-05-03');


INSERT INTO Payments (payment_id, order_id, payment_m, amount, payment_date) VALUES
(1, 1001, 'Card', 500.00, '2023-01-20'),
(2, 1002, 'Cash', 400.00, '2023-02-15'),
(3, 1003, 'Wallet', 600.00, '2023-03-10'),
(4, 1004, 'Card', 350.00, '2023-04-05'),
(5, 1005, 'Cash', 450.00, '2023-05-01');

# Retrieve the names and locations of restaurants with a rating of 4.5 or higher.

SELECT name,city,rating
FROM restaurants
WHERE rating >4.5;

#2. Find the total number of orders placed by each customer.

SELECT ct.customer_id,
	ct.first_name,
	COUNT(ot.order_id) AS item_count
 FROM customers AS ct
JOIN orders AS ot
ON ct.customer_id = ot.customer_id
GROUP BY ct.customer_id;
 
	
#3. List all restaurants offering "Italian" cuisine in "Mumbai".
 SELECT name,city,cuisine_type
 FROM restaurants
 WHERE city = 'Mumbai'
 AND cuisine_type='Italian';
    
#4. Calculate the total revenue generated by each restaurant from completed orders

 SELECT rt.name,SUM(ot.order_amount) AS rss
FROM restaurants AS rt
JOIN orders AS ot
ON rt.restaurants_id = ot.res_id
WHERE ot.order_status = 'Delivered'
GROUP BY rt.restaurants_id;
    
#5. Retrieve the most recent order placed by each customer.


SELECT ct.first_name,
    ct.last_name,
    ot.order_date
FROM customers AS ct
JOIN orders AS ot
ON ct.customer_id = ot.customer_id
WHERE ot.order_date = (
    SELECT MAX(order_date)
    FROM orders
    WHERE customer_id = ot.customer_id );

#6. List customers who have not placed any orders yet.

 SELECT ct.first_name,
    ct.last_name,
    ct.phone
FROM customers AS ct
LEFT JOIN orders AS ot
ON ct.customer_id = ot.customer_id
WHERE ot.customer_id IS NULL;
    
#7. Identify the most reviewed restaurants.

SELECT rt.name,
    rt.city,
    MAX(rt.rating) AS rating 
FROM restaurants AS rt
GROUP BY  restaurants_id
ORDER BY rating DESC
LIMIT 1;

#8. Find the most preferred payment method.

SELECT payment_m,
    COUNT(payment_m) AS counti
FROM payments
GROUP BY payment_m
ORDER BY counti DESC
LIMIT 1;

#9. List the top 5 restaurants by total revenue

SELECT rt.restaurants_id,
    rt.name,
    rt.city,
    SUM(ot.order_amount) AS revenue
FROM restaurants AS rt
JOIN  orders AS ot
ON  rt.restaurants_id = ot.res_id
GROUP BY ot.res_id 
ORDER BY revenue DESC
LIMIT  1;

#10. Show the details of all cancelled orders along with the customer's and restaurant's names.

SELECT ct.customer_id,
    ct.first_name,
    ct.last_name,
    rt.name,
    ot.order_status
FROM customers AS ct
JOIN orders AS ot
ON  ct.customer_id = ot.customer_id
JOIN restaurants AS rt
ON ot.res_id = rt.restaurants_id
WHERE ot.order_status ='Cancelled'; 
	
    